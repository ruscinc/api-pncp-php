<?php
/**
 * ConsultarInstrumentoCobrancaDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API PNCP
 *
 * API REST de serviços do Portal Nacional de Contratações Públicas (PNCP)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: css.serpro@serpro.gov.br
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ConsultarInstrumentoCobrancaDTO Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ConsultarInstrumentoCobrancaDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ConsultarInstrumentoCobrancaDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cnpj' => 'string',
        'ano' => 'int',
        'sequencial_contrato' => 'int',
        'sequencial_instrumento_cobranca' => 'int',
        'tipo_instrumento_cobranca' => '\OpenAPI\Client\Model\TipoInstrumentoCobrancaDTO',
        'numero_instrumento_cobranca' => 'string',
        'data_emissao_documento' => '\DateTime',
        'observacao' => 'string',
        'chave_nfe' => 'string',
        'fonte_nfe' => 'int',
        'data_consulta_nfe' => '\DateTime',
        'status_response_nfe' => 'string',
        'json_response_nfe' => 'string',
        'nota_fiscal_eletronica' => '\OpenAPI\Client\Model\NotaFiscalEletronicaConsultaDTO',
        'data_inclusao' => '\DateTime',
        'data_atualizacao' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cnpj' => null,
        'ano' => 'int32',
        'sequencial_contrato' => 'int32',
        'sequencial_instrumento_cobranca' => 'int32',
        'tipo_instrumento_cobranca' => null,
        'numero_instrumento_cobranca' => null,
        'data_emissao_documento' => 'date',
        'observacao' => null,
        'chave_nfe' => null,
        'fonte_nfe' => 'int64',
        'data_consulta_nfe' => 'date-time',
        'status_response_nfe' => null,
        'json_response_nfe' => null,
        'nota_fiscal_eletronica' => null,
        'data_inclusao' => 'date-time',
        'data_atualizacao' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cnpj' => false,
		'ano' => false,
		'sequencial_contrato' => false,
		'sequencial_instrumento_cobranca' => false,
		'tipo_instrumento_cobranca' => false,
		'numero_instrumento_cobranca' => false,
		'data_emissao_documento' => false,
		'observacao' => false,
		'chave_nfe' => false,
		'fonte_nfe' => false,
		'data_consulta_nfe' => false,
		'status_response_nfe' => false,
		'json_response_nfe' => false,
		'nota_fiscal_eletronica' => false,
		'data_inclusao' => false,
		'data_atualizacao' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cnpj' => 'cnpj',
        'ano' => 'ano',
        'sequencial_contrato' => 'sequencialContrato',
        'sequencial_instrumento_cobranca' => 'sequencialInstrumentoCobranca',
        'tipo_instrumento_cobranca' => 'tipoInstrumentoCobranca',
        'numero_instrumento_cobranca' => 'numeroInstrumentoCobranca',
        'data_emissao_documento' => 'dataEmissaoDocumento',
        'observacao' => 'observacao',
        'chave_nfe' => 'chaveNFe',
        'fonte_nfe' => 'fonteNFe',
        'data_consulta_nfe' => 'dataConsultaNFe',
        'status_response_nfe' => 'statusResponseNFe',
        'json_response_nfe' => 'jsonResponseNFe',
        'nota_fiscal_eletronica' => 'notaFiscalEletronica',
        'data_inclusao' => 'dataInclusao',
        'data_atualizacao' => 'dataAtualizacao'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cnpj' => 'setCnpj',
        'ano' => 'setAno',
        'sequencial_contrato' => 'setSequencialContrato',
        'sequencial_instrumento_cobranca' => 'setSequencialInstrumentoCobranca',
        'tipo_instrumento_cobranca' => 'setTipoInstrumentoCobranca',
        'numero_instrumento_cobranca' => 'setNumeroInstrumentoCobranca',
        'data_emissao_documento' => 'setDataEmissaoDocumento',
        'observacao' => 'setObservacao',
        'chave_nfe' => 'setChaveNfe',
        'fonte_nfe' => 'setFonteNfe',
        'data_consulta_nfe' => 'setDataConsultaNfe',
        'status_response_nfe' => 'setStatusResponseNfe',
        'json_response_nfe' => 'setJsonResponseNfe',
        'nota_fiscal_eletronica' => 'setNotaFiscalEletronica',
        'data_inclusao' => 'setDataInclusao',
        'data_atualizacao' => 'setDataAtualizacao'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cnpj' => 'getCnpj',
        'ano' => 'getAno',
        'sequencial_contrato' => 'getSequencialContrato',
        'sequencial_instrumento_cobranca' => 'getSequencialInstrumentoCobranca',
        'tipo_instrumento_cobranca' => 'getTipoInstrumentoCobranca',
        'numero_instrumento_cobranca' => 'getNumeroInstrumentoCobranca',
        'data_emissao_documento' => 'getDataEmissaoDocumento',
        'observacao' => 'getObservacao',
        'chave_nfe' => 'getChaveNfe',
        'fonte_nfe' => 'getFonteNfe',
        'data_consulta_nfe' => 'getDataConsultaNfe',
        'status_response_nfe' => 'getStatusResponseNfe',
        'json_response_nfe' => 'getJsonResponseNfe',
        'nota_fiscal_eletronica' => 'getNotaFiscalEletronica',
        'data_inclusao' => 'getDataInclusao',
        'data_atualizacao' => 'getDataAtualizacao'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('cnpj', $data ?? [], null);
        $this->setIfExists('ano', $data ?? [], null);
        $this->setIfExists('sequencial_contrato', $data ?? [], null);
        $this->setIfExists('sequencial_instrumento_cobranca', $data ?? [], null);
        $this->setIfExists('tipo_instrumento_cobranca', $data ?? [], null);
        $this->setIfExists('numero_instrumento_cobranca', $data ?? [], null);
        $this->setIfExists('data_emissao_documento', $data ?? [], null);
        $this->setIfExists('observacao', $data ?? [], null);
        $this->setIfExists('chave_nfe', $data ?? [], null);
        $this->setIfExists('fonte_nfe', $data ?? [], null);
        $this->setIfExists('data_consulta_nfe', $data ?? [], null);
        $this->setIfExists('status_response_nfe', $data ?? [], null);
        $this->setIfExists('json_response_nfe', $data ?? [], null);
        $this->setIfExists('nota_fiscal_eletronica', $data ?? [], null);
        $this->setIfExists('data_inclusao', $data ?? [], null);
        $this->setIfExists('data_atualizacao', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cnpj
     *
     * @return string|null
     */
    public function getCnpj()
    {
        return $this->container['cnpj'];
    }

    /**
     * Sets cnpj
     *
     * @param string|null $cnpj cnpj
     *
     * @return self
     */
    public function setCnpj($cnpj)
    {
        if (is_null($cnpj)) {
            throw new \InvalidArgumentException('non-nullable cnpj cannot be null');
        }
        $this->container['cnpj'] = $cnpj;

        return $this;
    }

    /**
     * Gets ano
     *
     * @return int|null
     */
    public function getAno()
    {
        return $this->container['ano'];
    }

    /**
     * Sets ano
     *
     * @param int|null $ano ano
     *
     * @return self
     */
    public function setAno($ano)
    {
        if (is_null($ano)) {
            throw new \InvalidArgumentException('non-nullable ano cannot be null');
        }
        $this->container['ano'] = $ano;

        return $this;
    }

    /**
     * Gets sequencial_contrato
     *
     * @return int|null
     */
    public function getSequencialContrato()
    {
        return $this->container['sequencial_contrato'];
    }

    /**
     * Sets sequencial_contrato
     *
     * @param int|null $sequencial_contrato sequencial_contrato
     *
     * @return self
     */
    public function setSequencialContrato($sequencial_contrato)
    {
        if (is_null($sequencial_contrato)) {
            throw new \InvalidArgumentException('non-nullable sequencial_contrato cannot be null');
        }
        $this->container['sequencial_contrato'] = $sequencial_contrato;

        return $this;
    }

    /**
     * Gets sequencial_instrumento_cobranca
     *
     * @return int|null
     */
    public function getSequencialInstrumentoCobranca()
    {
        return $this->container['sequencial_instrumento_cobranca'];
    }

    /**
     * Sets sequencial_instrumento_cobranca
     *
     * @param int|null $sequencial_instrumento_cobranca sequencial_instrumento_cobranca
     *
     * @return self
     */
    public function setSequencialInstrumentoCobranca($sequencial_instrumento_cobranca)
    {
        if (is_null($sequencial_instrumento_cobranca)) {
            throw new \InvalidArgumentException('non-nullable sequencial_instrumento_cobranca cannot be null');
        }
        $this->container['sequencial_instrumento_cobranca'] = $sequencial_instrumento_cobranca;

        return $this;
    }

    /**
     * Gets tipo_instrumento_cobranca
     *
     * @return \OpenAPI\Client\Model\TipoInstrumentoCobrancaDTO|null
     */
    public function getTipoInstrumentoCobranca()
    {
        return $this->container['tipo_instrumento_cobranca'];
    }

    /**
     * Sets tipo_instrumento_cobranca
     *
     * @param \OpenAPI\Client\Model\TipoInstrumentoCobrancaDTO|null $tipo_instrumento_cobranca tipo_instrumento_cobranca
     *
     * @return self
     */
    public function setTipoInstrumentoCobranca($tipo_instrumento_cobranca)
    {
        if (is_null($tipo_instrumento_cobranca)) {
            throw new \InvalidArgumentException('non-nullable tipo_instrumento_cobranca cannot be null');
        }
        $this->container['tipo_instrumento_cobranca'] = $tipo_instrumento_cobranca;

        return $this;
    }

    /**
     * Gets numero_instrumento_cobranca
     *
     * @return string|null
     */
    public function getNumeroInstrumentoCobranca()
    {
        return $this->container['numero_instrumento_cobranca'];
    }

    /**
     * Sets numero_instrumento_cobranca
     *
     * @param string|null $numero_instrumento_cobranca numero_instrumento_cobranca
     *
     * @return self
     */
    public function setNumeroInstrumentoCobranca($numero_instrumento_cobranca)
    {
        if (is_null($numero_instrumento_cobranca)) {
            throw new \InvalidArgumentException('non-nullable numero_instrumento_cobranca cannot be null');
        }
        $this->container['numero_instrumento_cobranca'] = $numero_instrumento_cobranca;

        return $this;
    }

    /**
     * Gets data_emissao_documento
     *
     * @return \DateTime|null
     */
    public function getDataEmissaoDocumento()
    {
        return $this->container['data_emissao_documento'];
    }

    /**
     * Sets data_emissao_documento
     *
     * @param \DateTime|null $data_emissao_documento data_emissao_documento
     *
     * @return self
     */
    public function setDataEmissaoDocumento($data_emissao_documento)
    {
        if (is_null($data_emissao_documento)) {
            throw new \InvalidArgumentException('non-nullable data_emissao_documento cannot be null');
        }
        $this->container['data_emissao_documento'] = $data_emissao_documento;

        return $this;
    }

    /**
     * Gets observacao
     *
     * @return string|null
     */
    public function getObservacao()
    {
        return $this->container['observacao'];
    }

    /**
     * Sets observacao
     *
     * @param string|null $observacao observacao
     *
     * @return self
     */
    public function setObservacao($observacao)
    {
        if (is_null($observacao)) {
            throw new \InvalidArgumentException('non-nullable observacao cannot be null');
        }
        $this->container['observacao'] = $observacao;

        return $this;
    }

    /**
     * Gets chave_nfe
     *
     * @return string|null
     */
    public function getChaveNfe()
    {
        return $this->container['chave_nfe'];
    }

    /**
     * Sets chave_nfe
     *
     * @param string|null $chave_nfe chave_nfe
     *
     * @return self
     */
    public function setChaveNfe($chave_nfe)
    {
        if (is_null($chave_nfe)) {
            throw new \InvalidArgumentException('non-nullable chave_nfe cannot be null');
        }
        $this->container['chave_nfe'] = $chave_nfe;

        return $this;
    }

    /**
     * Gets fonte_nfe
     *
     * @return int|null
     */
    public function getFonteNfe()
    {
        return $this->container['fonte_nfe'];
    }

    /**
     * Sets fonte_nfe
     *
     * @param int|null $fonte_nfe fonte_nfe
     *
     * @return self
     */
    public function setFonteNfe($fonte_nfe)
    {
        if (is_null($fonte_nfe)) {
            throw new \InvalidArgumentException('non-nullable fonte_nfe cannot be null');
        }
        $this->container['fonte_nfe'] = $fonte_nfe;

        return $this;
    }

    /**
     * Gets data_consulta_nfe
     *
     * @return \DateTime|null
     */
    public function getDataConsultaNfe()
    {
        return $this->container['data_consulta_nfe'];
    }

    /**
     * Sets data_consulta_nfe
     *
     * @param \DateTime|null $data_consulta_nfe data_consulta_nfe
     *
     * @return self
     */
    public function setDataConsultaNfe($data_consulta_nfe)
    {
        if (is_null($data_consulta_nfe)) {
            throw new \InvalidArgumentException('non-nullable data_consulta_nfe cannot be null');
        }
        $this->container['data_consulta_nfe'] = $data_consulta_nfe;

        return $this;
    }

    /**
     * Gets status_response_nfe
     *
     * @return string|null
     */
    public function getStatusResponseNfe()
    {
        return $this->container['status_response_nfe'];
    }

    /**
     * Sets status_response_nfe
     *
     * @param string|null $status_response_nfe status_response_nfe
     *
     * @return self
     */
    public function setStatusResponseNfe($status_response_nfe)
    {
        if (is_null($status_response_nfe)) {
            throw new \InvalidArgumentException('non-nullable status_response_nfe cannot be null');
        }
        $this->container['status_response_nfe'] = $status_response_nfe;

        return $this;
    }

    /**
     * Gets json_response_nfe
     *
     * @return string|null
     */
    public function getJsonResponseNfe()
    {
        return $this->container['json_response_nfe'];
    }

    /**
     * Sets json_response_nfe
     *
     * @param string|null $json_response_nfe json_response_nfe
     *
     * @return self
     */
    public function setJsonResponseNfe($json_response_nfe)
    {
        if (is_null($json_response_nfe)) {
            throw new \InvalidArgumentException('non-nullable json_response_nfe cannot be null');
        }
        $this->container['json_response_nfe'] = $json_response_nfe;

        return $this;
    }

    /**
     * Gets nota_fiscal_eletronica
     *
     * @return \OpenAPI\Client\Model\NotaFiscalEletronicaConsultaDTO|null
     */
    public function getNotaFiscalEletronica()
    {
        return $this->container['nota_fiscal_eletronica'];
    }

    /**
     * Sets nota_fiscal_eletronica
     *
     * @param \OpenAPI\Client\Model\NotaFiscalEletronicaConsultaDTO|null $nota_fiscal_eletronica nota_fiscal_eletronica
     *
     * @return self
     */
    public function setNotaFiscalEletronica($nota_fiscal_eletronica)
    {
        if (is_null($nota_fiscal_eletronica)) {
            throw new \InvalidArgumentException('non-nullable nota_fiscal_eletronica cannot be null');
        }
        $this->container['nota_fiscal_eletronica'] = $nota_fiscal_eletronica;

        return $this;
    }

    /**
     * Gets data_inclusao
     *
     * @return \DateTime|null
     */
    public function getDataInclusao()
    {
        return $this->container['data_inclusao'];
    }

    /**
     * Sets data_inclusao
     *
     * @param \DateTime|null $data_inclusao data_inclusao
     *
     * @return self
     */
    public function setDataInclusao($data_inclusao)
    {
        if (is_null($data_inclusao)) {
            throw new \InvalidArgumentException('non-nullable data_inclusao cannot be null');
        }
        $this->container['data_inclusao'] = $data_inclusao;

        return $this;
    }

    /**
     * Gets data_atualizacao
     *
     * @return \DateTime|null
     */
    public function getDataAtualizacao()
    {
        return $this->container['data_atualizacao'];
    }

    /**
     * Sets data_atualizacao
     *
     * @param \DateTime|null $data_atualizacao data_atualizacao
     *
     * @return self
     */
    public function setDataAtualizacao($data_atualizacao)
    {
        if (is_null($data_atualizacao)) {
            throw new \InvalidArgumentException('non-nullable data_atualizacao cannot be null');
        }
        $this->container['data_atualizacao'] = $data_atualizacao;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


